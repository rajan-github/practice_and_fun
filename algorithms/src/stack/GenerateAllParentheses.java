package stack;

import java.util.ArrayList;
import java.util.List;

/**
 * Given a number and return the list of all possible valid parenthesis
 * generated by using n parenthesis.
 * 
 * @author rajan-c
 *
 */
public class GenerateAllParentheses {
	public static List<String> generateParenthesis(int n) {
		List<String> parenthesisList = new ArrayList<>();
		if (n > 0)
			generateParenthesis(0, 0, n, new StringBuilder(), parenthesisList);
		else
			parenthesisList.add("");
		return parenthesisList;
	}

	private static void generateParenthesis(int leftParenthesis, int rightParenthesis, int n, StringBuilder parenthesis,
			List<String> parenthesisList) {
		if (leftParenthesis >= n && rightParenthesis >= n) {
			parenthesisList.add(parenthesis.toString());
			return;
		}
		if (leftParenthesis < n) {
			parenthesis.append("(");
			generateParenthesis(leftParenthesis + 1, rightParenthesis, n, parenthesis, parenthesisList);
			parenthesis.delete(parenthesis.length() - 1, parenthesis.length());
		}
		if (rightParenthesis < n && rightParenthesis < leftParenthesis) {
			parenthesis.append(")");
			generateParenthesis(leftParenthesis, rightParenthesis + 1, n, parenthesis, parenthesisList);
			parenthesis.delete(parenthesis.length() - 1, parenthesis.length());
		}
	}

	public static void main(String[] args) {
		System.out.println(generateParenthesis(2));
		System.out.println(generateParenthesis(3));
		System.out.println(generateParenthesis(4));
	}
}
